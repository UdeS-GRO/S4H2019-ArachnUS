% ==================== ANALYSE CINEMATIQUE D'UNE PATTE ====================
% ArachnUS - Projet S4 - UdeS - Robotique
% Créer : 				02/20/2019
% Dernière modif: 		02/20/2019

% ==================== Definition des objets ====================
NewtonianFrame N
RigidBody V1, V2, B1, B2, B3, R1, R2, R3 	% Corps de la patte voir img
Point B3g, B3b
Point R2b, R2x
Point V2b, V2x
Point V1x
Point R3b


%==================== Definition des variables et constantes ====================

Variable qV, qB 							% Angles de rotations de V1 et B1
Variable qB2, qB3, qV2, qR2, qR3, qR1

Constant x =90 mm
Constant y = -140 mm

Constant LB1 = 42.5 mm
Constant LB2 = 70 mm
Constant LB3u = 39.2 mm, LB3b = 154 mm, LB3i = 116.1 mm
Constant qB3u = 12.36 deg, qB3g = 163.5 deg, qB3b = 4.14 deg
Constant LV1 = 72.5 mm
Constant LV2l = 20 mm, LV2p = 15.49 mm
Constant qV2g = 80.5 deg, qV2p = 49.78 deg
Constant LR1 = 100 mm
Constant LR2l = 30 mm, LR2p = 22.5 mm
Constant qR2g = 83.4 deg, qR2p = 48.28 deg
Constant LR3 = 120.3 mm
Constant xp1 = 27 mm, yp2 = 31.02 mm


% ==================== Definition des rotations ====================
V1.RotateZ(N, qV)
B1.RotateZ(N, qB)

B2.RotateZ(B1, qB2)
B3.RotateZ(B2, qB3)
R1.RotateZ(N, qR1)
R2.RotateZ(R1, qR2)
R3.RotateZ(R2, qR3)
V2.RotateZ(B3, qV2)

% ==================== Creation du systeme a quatre barres ====================
B1o.SetPosition(No, 0>)
V1o.SetPosition(No, 0>)
R1o.SetPosition(No, -xp1*Nx> + yp2*Ny>)

B2o.SetPosition(B1o, LB1*B1x>)
B3o.SetPosition(B2o, LB2*B2x>)

B3g.SetPosition(B3o, LB3u*cos(qB3u)*B3x> - LB3u*sin(qB3u)*B3y>)
B3b.SetPosition(B3o, LB3b*B3x>)

R2o.SetPosition(R1o, LR1*R1x>)
R2x.SetPosition(R2o, LR2l*R2x>)
R2b.SetPosition(R2o, LR2p*cos(qR2p)*R2x> - LR2p*sin(qR2p)*R2y>)
R3o.SetPosition(R2x, 0>)

V2o.SetPosition(B3b, 0>)
V2x.SetPosition(V2o, LV2l*V2x>)
V2b.SetPosition(V2o, LV2p*cos(qV2p)*V2x> - LV2p*sin(qV2p)*V2y>)
V1x.SetPosition(V1o, LV1*V1x>)
R3b.SetPosition(R2x, LR3*R3x>)

% ==================== Résolution du système pour le déplacement en x et y ====================
%x> = V2b.GetPosition(No)
%LoopR2V> = -LV1*V1x> -xp1*Nx> + yp2*Ny> + LR1*R1x> + LR2p*cos(qR2p)*R2x> - LR2p*sin(qR2p)*R2y>
LoopR2V> = B2o.GetPosition(No) + B3o.GetPosition(B2o) + B3g.GetPosition(B3o) + No.GetPosition(B3o)
%LoopV2B> = LV1*V1x> + LR2p*cos(qR2p)*R2x> + LR2p*sin(qR2p)*R2y> + LR3*R3x> - LV2l*V2x> - LB3b*B3x> - LB2*B2x> - LB1*B1x>
LoopV2B> = R1o.GetPosition(No) + R2o.GetPosition(R1o) + R2x.GetPosition(R2o) + R2b.GetPosition(R2x) + No.GetPosition(V1x)
%LoopB2R> = -xp1*Nx> + yp2*Ny> + LR1*R1x> + LR2l*R2x> + LR3*R3x> - LV2l*V2x> - LB3b*B3x> - LB2*B2x> - LB1*B1x>
LoopB2R> = R2x.GetPosition(R2b) + R3b.GetPosition(R2x) + B3b.GetPosition(V2x) + B3g.GetPosition(B3b)

Eq[1] = dot(Nx>, LoopR2V>)
Eq[2] = dot(Ny>, LoopR2V>)
Eq[3] = dot(Nx>, LoopV2B>)
Eq[4] = dot(Ny>, LoopV2B>)
Eq[5] = dot(Nx>, LoopB2R>)
Eq[6] = dot(Ny>, LoopB2R>)
Eq[7] = dot(Nx>, V2b.GetPosition(No)) - x
Eq[8] = dot(Ny>, V2b.GetPosition(No)) - y
solve(Eq, qV = -5 deg, qB = 80 deg, qB2 = -80 deg, qB3 = -70 deg, qR1 = -10 deg, qR2 = -35 deg, qR3 = -45 deg, qV2 = 100 deg)
%solve(Eq, qV, qB, qB2, qB3, qR1, qR2, qR3, qV2)
pause
quit


